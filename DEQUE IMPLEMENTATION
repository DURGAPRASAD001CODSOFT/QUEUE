#include<iostream>
using namespace std;

class Node
{
    public:
    int data;
    Node *next,*prev;
    Node(int value)
    {
        data=value;
        next=NULL;
        prev=NULL;
    }
};

class Dequeue
{
    Node *front,*rear;
    public:
    Dequeue()
    {
    front=rear=NULL;
    }

    //push_front
    void push_front(int x)
    {
        if(front==NULL)
        {
            front=rear=new Node(x);
            cout<<"pushed "<<x<<" in front of dequeue\n";
            return; 
        }
        else
        {
            Node *temp = new Node(x);
            temp->next = front;
            front->prev = temp;
            front = temp;
             cout<<"pushed "<<x<<" in front of dequeue\n";
            return ;
        }
    }

    //push_back
      void push_back(int x)
    {
        if(front==NULL)
        {
            front=rear=new Node(x);
            cout<<"pushed "<<x<<" in back of dequeue\n";
            return; 
        }
        else
        {
            Node *temp = new Node(x);
            rear->next = temp;
            temp->prev = rear;
            rear=temp;
             cout<<"pushed "<<x<<" in back of dequeue\n";
            return ;
        }
    }
    //pop_front
    void pop_front()
    {
      if(front==NULL)
       {
        cout<<"dequeue underflow\n";
        return ;
      }
      else
      {
        Node *temp = front;
        cout<<"popped "<<temp->data<<" from front\n";
        front=front->next;
        delete temp;

        //greater than 1 node
        if(front)
        front->prev=NULL;
        else
        rear=NULL;

      }
    }

    //pop_back
    void pop_back()
    {
      if(front==NULL)
       {
        cout<<"dequeue underflow\n";
        return ;
      }
      else
      {
        Node *temp = rear;
        cout<<"popped "<<temp->data<<" from rear\n";
        rear = rear->prev;
        delete temp;

        //greater than 1 node
        if(front)
        rear->next=NULL;
        else
        front= NULL;

      }
    }

    //start
    int start()
    {
        if(front==NULL)
        return -1;
        else
        return front->data;
    }

    //end
    int end()
    {
        if(front==NULL)
        return -1;
        else
        return rear->data;
    }
};


int main()
{

Dequeue d;
d.push_back(4);
d.push_front(8);
d.pop_front();
cout<<d.start()<<endl;

}
